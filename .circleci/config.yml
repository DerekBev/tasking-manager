version: 2
jobs:
  build:
    working_directory: /home/circleci/app
    docker:
    - image: circleci/python:3-stretch-browsers
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Install Node and modules
        command: |
          sudo apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
          sudo apt-get install -y nodejs libgeos-dev # Required for shapely
          sudo npm install -g @mapbox/cfn-config @mapbox/cloudfriend
          sudo pip3 install awscli --upgrade
    - run:
        name: Set folder permissions
        command: |
          chown -R circleci:circleci $CIRCLE_WORKING_DIRECTORY
          chmod -R 755 $CIRCLE_WORKING_DIRECTORY
    - restore_cache:
        keys:
        - cached-dependencies
        paths:
        - client/node_modules
        - env
    - run:
        name: Install requirements
        command: |
          # Install NPM packages and build client from gulpfile
          cd $CIRCLE_WORKING_DIRECTORY/client
          npm install
          ./node_modules/.bin/gulp build
          cd $CIRCLE_WORKING_DIRECTORY
          # Install Python dependencies
          pip install virtualenv
          virtualenv env
          $CIRCLE_WORKING_DIRECTORY/env/bin/pip install --upgrade pip
          $CIRCLE_WORKING_DIRECTORY/env/bin/pip install -r requirements.txt
    - run:
        name: Run JS Unit tests
        command: |
          # JS Unit Tests
          cd $CIRCLE_WORKING_DIRECTORY/tests/client
          mkdir $CIRCLE_WORKING_DIRECTORY/tests/client/junit
          $CIRCLE_WORKING_DIRECTORY/client/node_modules/.bin/karma start ./karma.conf.js \
            --single-run --browsers PhantomJS --reporters junit 
        environment:
          JUNIT_REPORT_PATH: $CIRCLE_WORKING_DIRECTORY/tests/client/junit/
          JUNIT_REPORT_NAME: test-results.xml
    - store_test_results:
        path: $CIRCLE_WORKING_DIRECTORY/tests/client/junit
    - store_artifacts:
        path: $CIRCLE_WORKING_DIRECTORY/tests/client/junit
    - run:
        name: Run Python Tests
        command: |
          # Run Python tests
          cd $CIRCLE_WORKING_DIRECTORY
          mkdir $CIRCLE_WORKING_DIRECTORY/tests/server/results
          find ./tests/server -name "test*.py" -exec chmod -x {} \;
          env/bin/nosetests ./tests/server --with-xunit \
            --xunit-file $CIRCLE_WORKING_DIRECTORY/tests/server/results/unitresults.xml \
            --with-coverage --cover-erase --cover-package=./server
          env/bin/coverage xml -o $CIRCLE_WORKING_DIRECTORY/tests/server/results/coverage.xml
    - store_test_results:
        path: tests/server/results
    - store_artifacts:
        path: tests/server/results
    - save_cache:
        key: cached-dependencies
        paths:
        - client/node_modules
        - env
  staging:
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3-stretch
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Set Environment Variables
        command: |
          echo "export JSON_CONFIG='{\"GitSha\":\"$CIRCLE_SHA1\", \"Environment\":\"staging\", \"DBSnapshot\":\"\", \"DatabaseDump\":\"\", \"NewRelicLicense\":\"${NEW_RELIC_LICENSE}\", \"PostgresDB\":\"${POSTGRES_DB_STAGING}\", \"PostgresEndpoint\":\"\", \"PostgresPassword\":\"${POSTGRES_PASSWORD_STAGING}\", \"PostgresUser\":\"${POSTGRES_USER_STAGING}\", \"TaskingManagerAppBaseUrl\":\"${TM_APP_BASE_URL_STAGING}\", \"TaskingManagerConsumerKey\":\"${TM_CONSUMER_KEY_STAGING}\", \"TaskingManagerConsumerSecret\":\"${TM_CONSUMER_SECRET_STAGING}\", \"TaskingManagerDefaultChangesetComment\":\"${TM_DEFAULT_CHANGESET_COMMENT_STAGING}\", \"TaskingManagerSecret\":\"${TM_SECRET_STAGING}\", \"TaskingManagerEmailFromAddress\":\"${TM_EMAIL_FROM_ADDRESS_STAGING}\", \"TaskingManagerSMTPHost\":\"${TM_SMTP_HOST_STAGING}\", \"TaskingManagerSMTPPassword\":\"${TM_SMTP_PASSWORD_STAGING}\", \"TaskingManagerSMTPUser\":\"${TM_SMTP_USER_STAGING}\", \"TaskingManagerSMTPPort\":\"${TM_SMTP_PORT_STAGING}\", \"TaskingManagerLogDirectory\":\"${TM_LOG_DIR_STAGING}\",  \"DatabaseSize\":\"${DATABASE_SIZE_STAGING}\",\"ELBSubnets\":\"${ELB_SUBNETS_STAGING}\", \"SSLCertificateIdentifier\":\"${SSL_CERTIFICATE_ID_STAGING}\"}'" >> $BASH_ENV
    - run:
        name: Install Node and modules
        command: |
          sudo apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
          sudo apt-get install -y nodejs libgeos-dev # Required for shapely
          sudo npm install -g @mapbox/cfn-config @mapbox/cloudfriend
          npm install
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Get RDS Instance ID
        command: |
          chmod +x .circleci/rdsid.sh
          RDS_ID=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-staging"}')
          echo "export RDS_ID=$RDS_ID" >> $BASH_ENV
    - run:
        name: Remove last snapshot and backup database
        no_output_timeout: 15m
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-staging-$RDS_ID-latest --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
              echo "Snapshot does not exist, creating one now."
          else
              aws rds copy-db-snapshot --source-db-snapshot tm3-staging-$RDS_ID-latest --target-db-snapshot tm3-staging-$RDS_ID-temp
              aws rds delete-db-snapshot --db-snapshot-identifier tm3-staging-$RDS_ID-latest
          fi
          # create new aws rds snapshot
          aws rds create-db-snapshot --db-snapshot-identifier tm3-staging-$RDS_ID-latest --db-instance-identifier $RDS_ID
          aws rds wait db-snapshot-completed --db-snapshot-identifier tm3-staging-$RDS_ID-latest --db-instance-identifier $RDS_ID
          if [[ $? -eq 255 ]]; then
            echo "Production snapshot creation failed. Exiting with exit-code 125"
            exit 125
          fi
    - run:
        name: Create config file
        command: |
          touch $CIRCLE_WORKING_DIRECTORY/cfn-config-staging.json
          echo $JSON_CONFIG > $CIRCLE_WORKING_DIRECTORY/cfn-config-staging.json
    - deploy:
        name: Deploy to staging
        command: cfn-config update staging $CIRCLE_WORKING_DIRECTORY/devops/cloudformation/tasking-manager.template.js
          -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"
    - run:
        name: Cleanup
        when: always
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-staging-$RDS_ID-temp --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
            echo "temporary snapshot doesn't exist, nothing to cleanup."
          else
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-staging-$RDS_ID-temp
          fi
          # Delete manual snapshot if database ID changed
          RDS_ID_NEW=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-staging"}')
          if [ "$RDS_ID" != "$RDS_ID_NEW" ]
          then
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-staging-$RDS_ID-latest
          fi
  production:
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3-stretch
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Set Environment Variables
        command: |
          echo "export JSON_CONFIG='{\"GitSha\":\"$CIRCLE_SHA1\", \"Environment\":\"production\", \"DBSnapshot\":\"\", \"DatabaseDump\":\"\", \"NewRelicLicense\":\"${NEW_RELIC_LICENSE}\", \"PostgresDB\":\"${POSTGRES_DB_PRODUCTION}\", \"PostgresEndpoint\":\"\", \"PostgresPassword\":\"${POSTGRES_PASSWORD_PRODUCTION}\", \"PostgresUser\":\"${POSTGRES_USER_PRODUCTION}\", \"TaskingManagerAppBaseUrl\":\"${TM_APP_BASE_URL_PRODUCTION}\", \"TaskingManagerConsumerKey\":\"${TM_CONSUMER_KEY_PRODUCTION}\", \"TaskingManagerConsumerSecret\":\"${TM_CONSUMER_SECRET_PRODUCTION}\", \"TaskingManagerDefaultChangesetComment\":\"${TM_DEFAULT_CHANGESET_COMMENT_PRODUCTION}\", \"TaskingManagerSecret\":\"${TM_SECRET_PRODUCTION}\", \"TaskingManagerEmailFromAddress\":\"${TM_EMAIL_FROM_ADDRESS_PRODUCTION}\", \"TaskingManagerSMTPHost\":\"${TM_SMTP_HOST_PRODUCTION}\", \"TaskingManagerSMTPPassword\":\"${TM_SMTP_PASSWORD_PRODUCTION}\", \"TaskingManagerSMTPUser\":\"${TM_SMTP_USER_PRODUCTION}\", \"TaskingManagerSMTPPort\":\"${TM_SMTP_PORT_PRODUCTION}\", \"TaskingManagerLogDirectory\":\"${TM_LOG_DIR_PRODUCTION}\",  \"DatabaseSize\":\"${DATABASE_SIZE_PRODUCTION}\",\"ELBSubnets\":\"${ELB_SUBNETS_PRODUCTION}\", \"SSLCertificateIdentifier\":\"${SSL_CERTIFICATE_ID_PRODUCTION}\"}'" >> $BASH_ENV
    - run:
        name: Install Node and modules
        command: |
          sudo apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
          sudo apt-get install -y nodejs libgeos-dev # Required for shapely
          sudo npm install -g @mapbox/cfn-config @mapbox/cloudfriend
          npm install
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Get RDS Instance ID
        command: |
          chmod +x .circleci/rdsid.sh
          RDS_ID=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-prod-restored"}')
          echo "export RDS_ID=$RDS_ID" >> $BASH_ENV
    - run:
        name: Remove last snapshot and backup database
        no_output_timeout: 15m
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-prod-restored-$RDS_ID-latest --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
              echo "Snapshot does not exist, creating one now."
          else
              aws rds copy-db-snapshot --source-db-snapshot tm3-prod-restored-$RDS_ID-latest --target-db-snapshot tm3-prod-restored-$RDS_ID-temp
              aws rds delete-db-snapshot --db-snapshot-identifier tm3-prod-restored-$RDS_ID-latest
          fi
          # create new aws rds snapshot
          aws rds create-db-snapshot --db-snapshot-identifier tm3-prod-restored-$RDS_ID-latest --db-instance-identifier $RDS_ID
          aws rds wait db-snapshot-completed --db-snapshot-identifier tm3-prod-restored-$RDS_ID-latest --db-instance-identifier $RDS_ID
          if [[ $? -eq 255 ]]; then
            echo "Production snapshot creation failed. Exiting with exit-code 125"
            exit 125
          fi
    - run:
        name: Create config file
        command: |
          touch $CIRCLE_WORKING_DIRECTORY/cfn-config-prod-restored.json
          echo $JSON_CONFIG > $CIRCLE_WORKING_DIRECTORY/cfn-config-prod-restored.json
    - deploy:
        name: Deploy to prod-restored
        command: cfn-config update prod-restored $CIRCLE_WORKING_DIRECTORY/devops/cloudformation/tasking-manager.template.js
          -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"
    - run:
        name: Cleanup
        when: always
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-prod-restored-$RDS_ID-temp --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
            echo "temporary snapshot doesn't exist, nothing to cleanup."
          else
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-prod-restored-$RDS_ID-temp
          fi
          # Delete manual snapshot if database ID changed
          RDS_ID_NEW=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-prod-restored"}')
          if [ "$RDS_ID" != "$RDS_ID_NEW" ]
          then
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-prod-restored-$RDS_ID-latest
          fi
  teachosm:
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3-stretch
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Set Environment Variables
        command: |
          echo "export JSON_CONFIG='{\"GitSha\":\"$CIRCLE_SHA1\", \"Environment\":\"production\", \"DBSnapshot\":\"\", \"DatabaseDump\":\"\", \"NewRelicLicense\":\"${NEW_RELIC_LICENSE}\", \"PostgresDB\":\"${POSTGRES_DB_TEACHOSM}\", \"PostgresEndpoint\":\"\", \"PostgresPassword\":\"${POSTGRES_PASSWORD_TEACHOSM}\", \"PostgresUser\":\"${POSTGRES_USER_TEACHOSM}\", \"TaskingManagerAppBaseUrl\":\"${TM_APP_BASE_URL_TEACHOSM}\", \"TaskingManagerConsumerKey\":\"${TM_CONSUMER_KEY_TEACHOSM}\", \"TaskingManagerConsumerSecret\":\"${TM_CONSUMER_SECRET_TEACHOSM}\", \"TaskingManagerDefaultChangesetComment\":\"${TM_DEFAULT_CHANGESET_COMMENT_TEACHOSM}\", \"TaskingManagerSecret\":\"${TM_SECRET_TEACHOSM}\", \"TaskingManagerEmailFromAddress\":\"${TM_EMAIL_FROM_ADDRESS_TEACHOSM}\", \"TaskingManagerSMTPHost\":\"${TM_SMTP_HOST_TEACHOSM}\", \"TaskingManagerSMTPPassword\":\"${TM_SMTP_PASSWORD_TEACHOSM}\", \"TaskingManagerSMTPUser\":\"${TM_SMTP_USER_TEACHOSM}\", \"TaskingManagerSMTPPort\":\"${TM_SMTP_PORT_TEACHOSM}\", \"TaskingManagerLogDirectory\":\"${TM_LOG_DIR_TEACHOSM}\",  \"DatabaseSize\":\"${DATABASE_SIZE_TEACHOSM}\",\"ELBSubnets\":\"${ELB_SUBNETS_TEACHOSM}\", \"SSLCertificateIdentifier\":\"${SSL_CERTIFICATE_ID_TEACHOSM}\"}'" >> $BASH_ENV
    - run:
        name: Install Node and modules
        command: |
          sudo apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
          sudo apt-get install -y nodejs libgeos-dev # Required for shapely
          sudo npm install -g @mapbox/cfn-config @mapbox/cloudfriend
          npm install
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Get RDS Instance ID
        command: |
          chmod +x .circleci/rdsid.sh
          RDS_ID=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-teachosm"}')
          echo "export RDS_ID=$RDS_ID" >> $BASH_ENV
    - run:
        name: Remove last snapshot and backup database
        no_output_timeout: 15m
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-teachosm-$RDS_ID-latest --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
              echo "Snapshot does not exist, creating one now."
          else
              aws rds copy-db-snapshot --source-db-snapshot tm3-teachosm-$RDS_ID-latest --target-db-snapshot tm3-teachosm-$RDS_ID-temp
              aws rds delete-db-snapshot --db-snapshot-identifier tm3-teachosm-$RDS_ID-latest
          fi
          # create new aws rds snapshot
          aws rds create-db-snapshot --db-snapshot-identifier tm3-teachosm-$RDS_ID-latest --db-instance-identifier $RDS_ID
          aws rds wait db-snapshot-completed --db-snapshot-identifier tm3-teachosm-$RDS_ID-latest --db-instance-identifier $RDS_ID
          if [[ $? -eq 255 ]]; then
            echo "Production snapshot creation failed. Exiting with exit-code 125"
            exit 125
          fi
    - run:
        name: Create config file
        command: |
          touch $CIRCLE_WORKING_DIRECTORY/cfn-config-teachosm.json
          echo $JSON_CONFIG > $CIRCLE_WORKING_DIRECTORY/cfn-config-teachosm.json
    - deploy:
        name: Deploy to teachosm
        command: cfn-config update teachosm $CIRCLE_WORKING_DIRECTORY/devops/cloudformation/tasking-manager.template.js
          -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"
    - run:
        name: Cleanup
        when: always
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-teachosm-$RDS_ID-temp --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
            echo "temporary snapshot doesn't exist, nothing to cleanup."
          else
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-teachosm-$RDS_ID-temp
          fi
          # Delete manual snapshot if database ID changed
          RDS_ID_NEW=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-teachosm"}')
          if [ "$RDS_ID" != "$RDS_ID_NEW" ]
          then
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-teachosm-$RDS_ID-latest
          fi
  assisted:
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3-stretch
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Set Environment Variables
        command: |
          echo "export JSON_CONFIG='{\"GitSha\":\"$CIRCLE_SHA1\", \"Environment\":\"staging\", \"DBSnapshot\":\"\", \"DatabaseDump\":\"\", \"NewRelicLicense\":\"${NEW_RELIC_LICENSE}\", \"PostgresDB\":\"${POSTGRES_DB_ASSISTED}\", \"PostgresEndpoint\":\"\", \"PostgresPassword\":\"${POSTGRES_PASSWORD_ASSISTED}\", \"PostgresUser\":\"${POSTGRES_USER_ASSISTED}\", \"TaskingManagerAppBaseUrl\":\"${TM_APP_BASE_URL_ASSISTED}\", \"TaskingManagerConsumerKey\":\"${TM_CONSUMER_KEY_ASSISTED}\", \"TaskingManagerConsumerSecret\":\"${TM_CONSUMER_SECRET_ASSISTED}\", \"TaskingManagerDefaultChangesetComment\":\"${TM_DEFAULT_CHANGESET_COMMENT_ASSISTED}\", \"TaskingManagerSecret\":\"${TM_SECRET_ASSISTED}\", \"TaskingManagerEmailFromAddress\":\"${TM_EMAIL_FROM_ADDRESS_ASSISTED}\", \"TaskingManagerSMTPHost\":\"${TM_SMTP_HOST_ASSISTED}\", \"TaskingManagerSMTPPassword\":\"${TM_SMTP_PASSWORD_ASSISTED}\", \"TaskingManagerSMTPUser\":\"${TM_SMTP_USER_ASSISTED}\", \"TaskingManagerSMTPPort\":\"${TM_SMTP_PORT_ASSISTED}\", \"TaskingManagerLogDirectory\":\"${TM_LOG_DIR_ASSISTED}\",  \"DatabaseSize\":\"${DATABASE_SIZE_ASSISTED}\",\"ELBSubnets\":\"${ELB_SUBNETS_ASSISTED}\", \"SSLCertificateIdentifier\":\"${SSL_CERTIFICATE_ID_ASSISTED}\"}'" >> $BASH_ENV
    - run:
        name: Install Node and modules
        command: |
          sudo apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
          sudo apt-get install -y nodejs libgeos-dev # Required for shapely
          sudo npm install -g @mapbox/cfn-config @mapbox/cloudfriend
          npm install
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Get RDS Instance ID
        command: |
          chmod +x .circleci/rdsid.sh
          RDS_ID=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-assisted"}')
          echo "export RDS_ID=$RDS_ID" >> $BASH_ENV
    - run:
        name: Remove last snapshot and backup database
        no_output_timeout: 15m
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-assisted-$RDS_ID-latest --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
              echo "Snapshot does not exist, creating one now."
          else
              aws rds copy-db-snapshot --source-db-snapshot tm3-assisted-$RDS_ID-latest --target-db-snapshot tm3-assisted-$RDS_ID-temp
              aws rds delete-db-snapshot --db-snapshot-identifier tm3-assisted-$RDS_ID-latest
          fi
          # create new aws rds snapshot
          aws rds create-db-snapshot --db-snapshot-identifier tm3-assisted-$RDS_ID-latest --db-instance-identifier $RDS_ID
          aws rds wait db-snapshot-completed --db-snapshot-identifier tm3-assisted-$RDS_ID-latest --db-instance-identifier $RDS_ID
          if [[ $? -eq 255 ]]; then
            echo "Production snapshot creation failed. Exiting with exit-code 125"
            exit 125
          fi
    - run:
        name: Create config file
        command: |
          touch $CIRCLE_WORKING_DIRECTORY/cfn-config-assisted.json
          echo $JSON_CONFIG > $CIRCLE_WORKING_DIRECTORY/cfn-config-assisted.json
    - deploy:
        name: Deploy to assisted
        command: cfn-config update assisted $CIRCLE_WORKING_DIRECTORY/devops/cloudformation/tasking-manager.template.js
          -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"
    - run:
        name: Cleanup
        when: always
        command: |
          DESCRIBE_SNAPSHOT=`aws rds describe-db-snapshots --db-snapshot-identifier tm3-assisted-$RDS_ID-temp --db-instance-identifier $RDS_ID --output text`
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
            echo "temporary snapshot doesn't exist, nothing to cleanup."
          else
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-assisted-$RDS_ID-temp
          fi
          # Delete manual snapshot if database ID changed
          RDS_ID_NEW=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-assisted"}')
          if [ "$RDS_ID" != "$RDS_ID_NEW" ]
          then
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-assisted-$RDS_ID-latest
          fi
workflows:
  version: 2
  build-deploy:
    jobs:
    - build
    - staging:
        filters:
          branches:
            only:
            - develop
        requires:
        - build
    - production:
        filters:
          branches:
            only:
            - deployment/hot-tasking-manager
        requires:
        - build
    - teachosm:
        filters:
          branches:
            only:
            - deployment/teachosm-tasking-manager
        requires:
        - build
    - assisted:
        filters:
          branches:
            only:
            - deployment/assisted-tasking-manager
        requires:
        - build
